
Bugs:
When defining objects outside the main function in main.cpp, try using pointers.

Set with random guess
Win rate: 2612 out of 10000

Set with set guess
Win rate: 3320 out of 10000

Set and local search
Win rate: 2615 out of 10000
Time: 967

QLearning

LR: 0.01/BS
Momentum: 0

Iteration: 100 Score: 0.298 Time stamp: 97
Iteration: 200 Score: 0.317 Time stamp: 193
Iteration: 300 Score: 0.297 Time stamp: 289
Iteration: 400 Score: 0.326 Time stamp: 386
Iteration: 500 Score: 0.305 Time stamp: 483
Iteration: 600 Score: 0.322 Time stamp: 580
Iteration: 700 Score: 0.294 Time stamp: 676
Iteration: 800 Score: 0.305 Time stamp: 772
Iteration: 900 Score: 0.298 Time stamp: 868

LR: 0.1/BS
Momentum: 0.7

Iteration: 100 Score: 0.326 Time stamp: 97
Iteration: 200 Score: 0.341 Time stamp: 194
Iteration: 300 Score: 0.348 Time stamp: 290
Iteration: 400 Score: 0.297 Time stamp: 386
Iteration: 500 Score: 0.343 Time stamp: 482
Iteration: 600 Score: 0.304 Time stamp: 577
Iteration: 700 Score: 0.356 Time stamp: 674
Iteration: 800 Score: 0.345 Time stamp: 769
Iteration: 900 Score: 0.327 Time stamp: 866

Run for 10000 iterations: Total score: 0.33844

Trial for structure:
structure = LSTM::Model(LSTM::Shape(boardH, boardW, 10));
    structure.addConv(LSTM::Shape(16, 30, 20), 3, 3);
    structure.addPool(LSTM::Shape(8, 15, 20));
    structure.addConv(LSTM::Shape(8, 14, 40), 3, 3);
    structure.addPool(LSTM::Shape(4, 7, 40));
    structure.addDense(800);
    structure.addOutput(boardH*boardW);
    structure.randomize(0.1);
    structure.resetGradient();


0: numIter: 1000 numRollout: 300 evalPeriod: 10 learnRate: 0.500000 momentum: 0.700000 regRate: 0.000000 0.338673
0: numIter: 1000 numRollout: 300 evalPeriod: 10 learnRate: 0.200000 momentum: 0.700000 regRate: 0.000000 0.33476
0: numIter: 1000 numRollout: 300 evalPeriod: 10 learnRate: 0.100000 momentum: 0.700000 regRate: 0.000000 0.335497
0: numIter: 1000 numRollout: 300 evalPeriod: 10 learnRate: 0.050000 momentum: 0.700000 regRate: 0.000000 0.333567
0: numIter: 1000 numRollout: 300 evalPeriod: 10 learnRate: 0.020000 momentum: 0.700000 regRate: 0.000000 0.335047
0: numIter: 1000 numRollout: 300 evalPeriod: 10 learnRate: 0.010000 momentum: 0.700000 regRate: 0.000000 0.331473
0: numIter: 1000 numRollout: 300 evalPeriod: 10 learnRate: 0.500000 momentum: 0.900000 regRate: 0.000000 0.299263
0: numIter: 1000 numRollout: 300 evalPeriod: 10 learnRate: 0.200000 momentum: 0.900000 regRate: 0.000000 0.3287
0: numIter: 1000 numRollout: 300 evalPeriod: 10 learnRate: 0.100000 momentum: 0.900000 regRate: 0.000000 0.333617
0: numIter: 1000 numRollout: 300 evalPeriod: 10 learnRate: 0.050000 momentum: 0.900000 regRate: 0.000000 0.337053
0: numIter: 1000 numRollout: 300 evalPeriod: 10 learnRate: 0.020000 momentum: 0.900000 regRate: 0.000000 0.339923
0: numIter: 1000 numRollout: 300 evalPeriod: 10 learnRate: 0.010000 momentum: 0.900000 regRate: 0.000000 0.3393

Trial for structure:

structure = LSTM::Model(LSTM::Shape(boardH, boardW, 10));
    structure.addConv(LSTM::Shape(16, 30, 30), 3, 3);
    structure.addPool(LSTM::Shape(8, 15, 30));
    structure.addConv(LSTM::Shape(8, 14, 50), 3, 3);
    structure.addPool(LSTM::Shape(4, 7, 50));
    structure.addDense(1000);
    structure.addOutput(boardH*boardW);
    structure.randomize(0.1);
    structure.resetGradient();

0: numIter: 1000 numRollout: 300 evalPeriod: 10 learnRate: 0.500000 momentum: 0.700000 regRate: 0.000000 0.33395
0: numIter: 1000 numRollout: 300 evalPeriod: 10 learnRate: 0.100000 momentum: 0.700000 regRate: 0.000000 0.337083
0: numIter: 1000 numRollout: 300 evalPeriod: 10 learnRate: 0.050000 momentum: 0.700000 regRate: 0.000000 0.336753
0: numIter: 1000 numRollout: 300 evalPeriod: 10 learnRate: 0.010000 momentum: 0.700000 regRate: 0.000000 0.33624
0: numIter: 1000 numRollout: 300 evalPeriod: 10 learnRate: 0.500000 momentum: 0.900000 regRate: 0.000000 0.31179
0: numIter: 1000 numRollout: 300 evalPeriod: 10 learnRate: 0.100000 momentum: 0.900000 regRate: 0.000000 0.331123
0: numIter: 1000 numRollout: 300 evalPeriod: 10 learnRate: 0.050000 momentum: 0.900000 regRate: 0.000000 0.3358
0: numIter: 1000 numRollout: 300 evalPeriod: 10 learnRate: 0.010000 momentum: 0.900000 regRate: 0.000000 0.336093
0: numIter: 10000 numRollout: 30 evalPeriod: 100 learnRate: 0.500000 momentum: 0.700000 regRate: 0.000000 0.313803
0: numIter: 10000 numRollout: 30 evalPeriod: 100 learnRate: 0.100000 momentum: 0.700000 regRate: 0.000000 0.337627
0: numIter: 10000 numRollout: 30 evalPeriod: 100 learnRate: 0.010000 momentum: 0.700000 regRate: 0.000000 0.340103
0: numIter: 10000 numRollout: 30 evalPeriod: 100 learnRate: 0.500000 momentum: 0.900000 regRate: 0.000000 0.321127
0: numIter: 10000 numRollout: 30 evalPeriod: 100 learnRate: 0.100000 momentum: 0.900000 regRate: 0.000000 0.336043
0: numIter: 10000 numRollout: 30 evalPeriod: 100 learnRate: 0.050000 momentum: 0.900000 regRate: 0.000000 0.324197
0: numIter: 10000 numRollout: 30 evalPeriod: 100 learnRate: 0.010000 momentum: 0.900000 regRate: 0.000000 0.33626

Fixed training to normalize with respect to rollout length:

structure = LSTM::Model(LSTM::Shape(boardH, boardW, 10));
    structure.addConv(LSTM::Shape(16, 30, 20), 3, 3);
    structure.addPool(LSTM::Shape(8, 15, 20));
    structure.addConv(LSTM::Shape(8, 14, 40), 3, 3);
    structure.addPool(LSTM::Shape(4, 7, 40));
    structure.addDense(800);
    structure.addOutput(boardH*boardW);
    structure.randomize(0.1);
    structure.resetGradient();

    0: numIter: 1000 numRollout: 300 evalPeriod: 10 learnRate: 0.500000 momentum: 0.700000 regRate: 0.000000 0.340867
    0: numIter: 1000 numRollout: 300 evalPeriod: 10 learnRate: 0.100000 momentum: 0.700000 regRate: 0.000000 0.327757
    0: numIter: 1000 numRollout: 300 evalPeriod: 10 learnRate: 0.050000 momentum: 0.700000 regRate: 0.000000 0.342703
    0: numIter: 1000 numRollout: 300 evalPeriod: 10 learnRate: 0.010000 momentum: 0.700000 regRate: 0.000000 0.331213
    0: numIter: 1000 numRollout: 300 evalPeriod: 10 learnRate: 0.500000 momentum: 0.900000 regRate: 0.000000 0.335517
    0: numIter: 1000 numRollout: 300 evalPeriod: 10 learnRate: 0.100000 momentum: 0.900000 regRate: 0.000000 0.321023
    0: numIter: 1000 numRollout: 300 evalPeriod: 10 learnRate: 0.050000 momentum: 0.900000 regRate: 0.000000 0.32525
    0: numIter: 1000 numRollout: 300 evalPeriod: 10 learnRate: 0.010000 momentum: 0.900000 regRate: 0.000000 0.34148
    0: numIter: 10000 numRollout: 30 evalPeriod: 100 learnRate: 0.500000 momentum: 0.700000 regRate: 0.000000 0.342347
    0: numIter: 10000 numRollout: 30 evalPeriod: 100 learnRate: 0.100000 momentum: 0.700000 regRate: 0.000000 0.341217
    0: numIter: 10000 numRollout: 30 evalPeriod: 100 learnRate: 0.050000 momentum: 0.700000 regRate: 0.000000 0.331167
    0: numIter: 10000 numRollout: 30 evalPeriod: 100 learnRate: 0.010000 momentum: 0.700000 regRate: 0.000000 0.34097
    0: numIter: 10000 numRollout: 30 evalPeriod: 100 learnRate: 0.500000 momentum: 0.900000 regRate: 0.000000 0.324113
    0: numIter: 10000 numRollout: 30 evalPeriod: 100 learnRate: 0.100000 momentum: 0.900000 regRate: 0.000000 0.335517
    0: numIter: 10000 numRollout: 30 evalPeriod: 100 learnRate: 0.050000 momentum: 0.900000 regRate: 0.000000 0.326653
    0: numIter: 10000 numRollout: 30 evalPeriod: 100 learnRate: 0.010000 momentum: 0.900000 regRate: 0.000000 0.341737